{"ast":null,"code":"var _jsxFileName = \"/Users/maryselig/Documents/memory-game-redux/memory-game-redux/src/components/App.js\";\nimport React from 'react';\nimport '../css/App.css';\nimport '../css/index.css';\nimport paintings from '../data/paintings';\nimport BoardGame from './BoardGame';\nimport { withRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      paintings: [],\n      indeciesToPlay: [],\n      showStartGameButton: true\n    };\n\n    this.createNewArray = () => {\n      // this is the function to call on click of 'start game'\n      const newArray = this.setNewArrayofPaintings(); // creates array of 8 random numbers from 0 to 96\n\n      const arrayOf16 = newArray.concat(...newArray); // doubles array of 8 random numbers from 0 to 96\n\n      this.shuffle(arrayOf16); // shuffles numbers of the array\n    };\n\n    this.setNewArrayofPaintings = () => {\n      const index = [...Array(97).keys()]; // creates an array of whole numbers 0 to 96\n\n      const newArray = [];\n      var i = 0;\n\n      while (i < 8) {\n        // limits length of new array to 8 numbers\n        var rand = index[Math.floor(Math.random() * index.length)]; // pulls a randon number out of the index array\n\n        var indexNew = index.indexOf(rand); // sets the index of the randon number as a variable\n\n        if (indexNew > -1) {\n          index.splice(indexNew, 1); // splices the randon number from the index array\n\n          newArray.push(rand); // pushes the randon number into a new array\n        }\n\n        i++;\n      }\n\n      return newArray; // returns array of 8 randon numbers from the 'index' array without ever\n      // repeating any numbers\n    };\n\n    this.shuffle = array => {\n      // shuffles the indicies of the array of 16 numbers from the 8 random numbers selected\n      let counter = array.length;\n\n      while (counter > 0) {\n        const index = Math.floor(Math.random() * counter);\n        counter--;\n        const temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n      }\n\n      this.setState({\n        indeciesToPlay: array\n      });\n    };\n\n    this.paintingsToPass = () => {\n      const indecies = this.state.indeciesToPlay;\n      const paintings = this.state.paintings;\n      return indecies.map(index => paintings[index]);\n    };\n\n    this.startGame = () => {\n      this.createNewArray();\n    };\n\n    this.endGame = () => {\n      this.setState({\n        showStartGameButton: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      paintings\n    });\n  }\n\n  render() {\n    const paintingsToPass = this.paintingsToPass(); // this is called here to ensure that all the necessary state has been generated\n    // before the page renders- asyncronous loading!\n\n    return React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.showStartGameButton ? React.createElement(\"button\", {\n      size: \"large\",\n      primary: true,\n      className: \"start-page-buttons\",\n      onClick: () => this.startGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, ' ', \"Start Game\", ' ') : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"CONGRATS, THANKS FOR PLAYING :)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(BoardGame, {\n      endGame: this.endGame,\n      paintingsToPass: paintingsToPass,\n      createNewArray: this.createNewArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/maryselig/Documents/memory-game-redux/memory-game-redux/src/components/App.js"],"names":["React","paintings","BoardGame","withRouter","App","Component","state","indeciesToPlay","showStartGameButton","createNewArray","newArray","setNewArrayofPaintings","arrayOf16","concat","shuffle","index","Array","keys","i","rand","Math","floor","random","length","indexNew","indexOf","splice","push","array","counter","temp","setState","paintingsToPass","indecies","map","startGame","endGame","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport '../css/App.css'\nimport '../css/index.css'\nimport paintings from '../data/paintings'\nimport BoardGame from './BoardGame'\nimport { withRouter } from 'react-router-dom'\n\nclass App extends React.Component {\n  state = {\n    paintings: [],\n    indeciesToPlay: [],\n    showStartGameButton: true\n  }\n\n  createNewArray = () => {\n    // this is the function to call on click of 'start game'\n    const newArray = this.setNewArrayofPaintings()\n    // creates array of 8 random numbers from 0 to 96\n    const arrayOf16 = newArray.concat(...newArray)\n    // doubles array of 8 random numbers from 0 to 96\n    this.shuffle(arrayOf16)\n    // shuffles numbers of the array\n  }\n\n  setNewArrayofPaintings = () => {\n    const index = [...Array(97).keys()]\n    // creates an array of whole numbers 0 to 96\n    const newArray = []\n    var i = 0\n    while (i < 8) {\n      // limits length of new array to 8 numbers\n      var rand = index[Math.floor(Math.random() * index.length)]\n      // pulls a randon number out of the index array\n      var indexNew = index.indexOf(rand)\n      // sets the index of the randon number as a variable\n      if (indexNew > -1) {\n        index.splice(indexNew, 1)\n        // splices the randon number from the index array\n        newArray.push(rand)\n        // pushes the randon number into a new array\n      }\n      i++\n    }\n    return newArray\n    // returns array of 8 randon numbers from the 'index' array without ever\n    // repeating any numbers\n  }\n\n  shuffle = array => {\n    // shuffles the indicies of the array of 16 numbers from the 8 random numbers selected\n    let counter = array.length\n    while (counter > 0) {\n      const index = Math.floor(Math.random() * counter)\n      counter--\n      const temp = array[counter]\n      array[counter] = array[index]\n      array[index] = temp\n    }\n    this.setState({ indeciesToPlay: array })\n  }\n\n  paintingsToPass = () => {\n    const indecies = this.state.indeciesToPlay\n    const paintings = this.state.paintings\n    return indecies.map(index => paintings[index])\n  }\n\n  componentDidMount () {\n    this.setState({ paintings })\n  }\n\n  startGame = () => {\n    this.createNewArray()\n  }\n\n  endGame = () => {\n    this.setState({ showStartGameButton: false })\n  }\n\n  render () {\n    const paintingsToPass = this.paintingsToPass()\n    // this is called here to ensure that all the necessary state has been generated\n    // before the page renders- asyncronous loading!\n    return (\n      <div className='App-header'>\n        {this.state.showStartGameButton ? (\n          <button\n            size='large'\n            primary\n            className='start-page-buttons'\n            onClick={() => this.startGame()}\n          >\n            {' '}\n            Start Game{' '}\n          </button>\n        ) : (\n          <h2>CONGRATS, THANKS FOR PLAYING :)</h2>\n        )}\n        <br />\n        <BoardGame\n          endGame={this.endGame}\n          paintingsToPass={paintingsToPass}\n          createNewArray={this.createNewArray}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}