{"ast":null,"code":"var _jsxFileName = \"/Users/maryselig/Documents/memory-game-redux/memory-game-redux/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport './index.css';\nimport paintings from './data/paintings';\nimport BoardGame from './BoardGame';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from 'semantic-ui-react';\nconst SAVEGAMEURL = 'http://localhost:3000/save-game';\nconst MySwal = withReactContent(Swal);\nlet timeElapsed = 0;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      paintings: [],\n      indeciesToPlay: [],\n      runtime: 0,\n      // set state at end of game and then do patch request\n      showStartGameButton: true\n    };\n    this.timerHandle = null;\n\n    this.setNewArrayofPaintings = () => {\n      const index = [...Array(97).keys()]; // this works\n\n      const newArray = [];\n      var i = 0;\n\n      while (i < 8) {\n        var rand = index[Math.floor(Math.random() * index.length)]; // this works\n\n        var indexNew = index.indexOf(rand);\n\n        if (indexNew > -1) {\n          index.splice(indexNew, 1);\n          newArray.push(rand);\n        }\n\n        i++;\n      }\n\n      return newArray;\n    };\n\n    this.createNewArray = () => {\n      // this is the function to call on click of 'start game'\n      const newArray = this.setNewArrayofPaintings();\n      const arrayOf16 = newArray.concat(...newArray);\n      this.shuffle(arrayOf16);\n    };\n\n    this.shuffle = array => {\n      let counter = array.length;\n\n      while (counter > 0) {\n        const index = Math.floor(Math.random() * counter);\n        counter--;\n        const temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n      }\n\n      this.setState({\n        indeciesToPlay: array\n      });\n    };\n\n    this.paintingsToPass = () => {\n      const indecies = this.state.indeciesToPlay;\n      const paintings = this.state.paintings;\n      return indecies.map(index => paintings[index]);\n    };\n\n    this.startGame = () => {\n      this.startTimer();\n      this.createNewArray();\n      this.setState({\n        showLeaderboard: true\n      });\n    };\n\n    this.startTimer = () => {\n      this.setState({\n        runtime: 0,\n        timerOn: true\n      });\n      this.timerHandle = setInterval(() => {\n        timeElapsed += 1;\n        this.setState({\n          runtime: timeElapsed\n        });\n      }, 1000);\n    };\n\n    this.endTimer = () => {\n      clearInterval(this.timerHandle);\n      MySwal.fire({\n        imageUrl: 'https://media.giphy.com/media/h5AHEcNMhn7u8/giphy.gif',\n        imageWidth: 300,\n        imageHeight: 200,\n        imageAlt: 'Bob Ross',\n        animation: false,\n        confirmButtonText: 'Im done',\n        background: '#090526',\n        padding: '.25em',\n        confirmButtonColor: 'cornflowerblue',\n        width: 300\n      });\n      this.setState({\n        indeciesToPlay: []\n      });\n    };\n\n    this.postData = (username, score) => {\n      const Newuser = {\n        user: {\n          username: username,\n          highScore: score\n        }\n      };\n      return fetch(SAVEGAMEURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Newuser)\n      }).then(resp => resp.json()).then(resp => console.log(resp));\n    };\n\n    this.endGame = () => {\n      this.setState({\n        showStartGameButton: false\n      });\n      this.endTimer();\n      this.postData(this.props.currentPlayer, this.state.runtime);\n      this.setState({\n        showLeaderboard: false\n      }); //  this.props.history.push('/')\n    };\n\n    this.quitApp = () => {\n      if (this.timerHandle === null) {\n        this.props.history.push('/');\n      } else {\n        clearInterval(this.timerHandle);\n        this.props.history.push('/');\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      paintings\n    });\n  }\n\n  render() {\n    const paintingsToPass = this.paintingsToPass();\n    return React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.state.showStartGameButton ? React.createElement(Button, {\n      size: \"large\",\n      primary: true,\n      className: \"start-page-buttons\",\n      onClick: () => this.startGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, ' ', \"Start Game\", ' ') : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"CONGRATS, THANKS FOR PLAYING :)\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Button, {\n      size: \"large\",\n      primary: true,\n      className: \"start-page-buttons\",\n      onClick: () => this.quitApp(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, '   ', \"Logout \", '  '), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(BoardGame, {\n      endGame: this.endGame,\n      paintingsToPass: paintingsToPass,\n      createNewArray: this.createNewArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/maryselig/Documents/memory-game-redux/memory-game-redux/src/App.js"],"names":["React","paintings","BoardGame","Swal","withReactContent","withRouter","Button","SAVEGAMEURL","MySwal","timeElapsed","App","Component","state","indeciesToPlay","runtime","showStartGameButton","timerHandle","setNewArrayofPaintings","index","Array","keys","newArray","i","rand","Math","floor","random","length","indexNew","indexOf","splice","push","createNewArray","arrayOf16","concat","shuffle","array","counter","temp","setState","paintingsToPass","indecies","map","startGame","startTimer","showLeaderboard","timerOn","setInterval","endTimer","clearInterval","fire","imageUrl","imageWidth","imageHeight","imageAlt","animation","confirmButtonText","background","padding","confirmButtonColor","width","postData","username","score","Newuser","user","highScore","fetch","method","headers","body","JSON","stringify","then","resp","json","console","log","endGame","props","currentPlayer","quitApp","history","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport './index.css'\nimport paintings from './data/paintings'\nimport BoardGame from './BoardGame'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { withRouter } from 'react-router-dom'\n\nimport { Button } from 'semantic-ui-react'\n\nconst SAVEGAMEURL = 'http://localhost:3000/save-game'\n\nconst MySwal = withReactContent(Swal)\n\nlet timeElapsed = 0\n\nclass App extends React.Component {\n  state = {\n    paintings: [],\n    indeciesToPlay: [],\n    runtime: 0, // set state at end of game and then do patch request\n    showStartGameButton: true\n  }\n\n  timerHandle = null\n\n  setNewArrayofPaintings = () => {\n    const index = [...Array(97).keys()] // this works\n    const newArray = []\n    var i = 0\n    while (i < 8) {\n      var rand = index[Math.floor(Math.random() * index.length)] // this works\n      var indexNew = index.indexOf(rand)\n      if (indexNew > -1) {\n        index.splice(indexNew, 1)\n        newArray.push(rand)\n      }\n      i++\n    }\n    return newArray\n  }\n\n  createNewArray = () => {\n    // this is the function to call on click of 'start game'\n    const newArray = this.setNewArrayofPaintings()\n    const arrayOf16 = newArray.concat(...newArray)\n    this.shuffle(arrayOf16)\n  }\n\n  shuffle = array => {\n    let counter = array.length\n    while (counter > 0) {\n      const index = Math.floor(Math.random() * counter)\n      counter--\n      const temp = array[counter]\n      array[counter] = array[index]\n      array[index] = temp\n    }\n    this.setState({ indeciesToPlay: array })\n  }\n\n  paintingsToPass = () => {\n    const indecies = this.state.indeciesToPlay\n    const paintings = this.state.paintings\n    return indecies.map(index => paintings[index])\n  }\n\n  componentDidMount () {\n    this.setState({ paintings })\n  }\n\n  startGame = () => {\n    this.startTimer()\n    this.createNewArray()\n    this.setState({ showLeaderboard: true })\n  }\n\n  startTimer = () => {\n    this.setState({ runtime: 0, timerOn: true })\n    this.timerHandle = setInterval(() => {\n      timeElapsed += 1\n      this.setState({ runtime: timeElapsed })\n    }, 1000)\n  }\n\n  endTimer = () => {\n    clearInterval(this.timerHandle)\n    MySwal.fire({\n      imageUrl: 'https://media.giphy.com/media/h5AHEcNMhn7u8/giphy.gif',\n      imageWidth: 300,\n      imageHeight: 200,\n      imageAlt: 'Bob Ross',\n      animation: false,\n      confirmButtonText: 'Im done',\n      background: '#090526',\n      padding: '.25em',\n      confirmButtonColor: 'cornflowerblue',\n      width: 300\n    })\n    this.setState({ indeciesToPlay: [] })\n  }\n\n  postData = (username, score) => {\n    const Newuser = {\n      user: {\n        username: username,\n        highScore: score\n      }\n    }\n    return fetch(SAVEGAMEURL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(Newuser)\n    })\n      .then(resp => resp.json())\n      .then(resp => console.log(resp))\n  }\n\n  endGame = () => {\n    this.setState({ showStartGameButton: false })\n    this.endTimer()\n    this.postData(this.props.currentPlayer, this.state.runtime)\n    this.setState({ showLeaderboard: false })\n    //  this.props.history.push('/')\n  }\n\n  quitApp = () => {\n    if (this.timerHandle === null) {\n      this.props.history.push('/')\n    } else {\n      clearInterval(this.timerHandle)\n      this.props.history.push('/')\n    }\n  }\n\n  render () {\n    const paintingsToPass = this.paintingsToPass()\n    return (\n      <div className='App-header'>\n        {this.state.showStartGameButton ? (\n          <Button\n            size='large'\n            primary\n            className='start-page-buttons'\n            onClick={() => this.startGame()}\n          >\n            {' '}\n            Start Game{' '}\n          </Button>\n        ) : (\n          <h2>CONGRATS, THANKS FOR PLAYING :)</h2>\n        )}\n        <br />\n        <Button\n          size='large'\n          primary\n          className='start-page-buttons'\n          onClick={() => this.quitApp()}\n        >\n          {'   '}\n          Logout {'  '}\n        </Button>\n        <br />\n        <BoardGame\n          endGame={this.endGame}\n          paintingsToPass={paintingsToPass}\n          createNewArray={this.createNewArray}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}