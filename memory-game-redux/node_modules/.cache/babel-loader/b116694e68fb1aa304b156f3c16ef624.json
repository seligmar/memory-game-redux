{"ast":null,"code":"var _jsxFileName = \"/Users/maryselig/Documents/memory-game-redux/memory-game-redux/src/components/BoardGame.js\";\nimport React from 'react';\nimport Card from './Card';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nconst MySwal = withReactContent(Swal);\nlet flippedCards = 0;\n\nclass BoardGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      paintingInPlay: [],\n      cards: 0,\n      removedPaintings: []\n    };\n\n    this.checkMatch = painting => {\n      const painting1 = this.state.paintingInPlay[1];\n\n      if (painting.id === painting1.id) {\n        MySwal.fire({\n          imageUrl: 'https://media.giphy.com/media/flYwljLseVZWE/giphy.gif',\n          text: 'They Match!',\n          imageWidth: 300,\n          imageHeight: 200,\n          width: 300,\n          background: '#090526',\n          confirmButtonColor: 'cornflowerblue',\n          padding: '.25em',\n          imageAlt: 'Bob Ross',\n          animation: false\n        });\n        this.removePaintings(painting.id);\n        this.setState({\n          paintingInPlay: []\n        });\n        this.clearCardCount();\n      } else {\n        this.setState({\n          paintingInPlay: []\n        });\n        MySwal.fire({\n          imageUrl: 'https://media.giphy.com/media/rYEAkYihZsyWs/giphy.gif',\n          imageWidth: 300,\n          imageHeight: 200,\n          confirmButtonText: 'Next!',\n          background: '#090526',\n          imageAlt: 'Bob Ross',\n          padding: '.25em',\n          confirmButtonColor: 'cornflowerblue',\n          width: 300,\n          animation: false\n        });\n        this.clearCardCount();\n      }\n    };\n\n    this.flipCardOnBoard = () => {\n      flippedCards += 1;\n      this.setState({\n        cards: flippedCards\n      });\n    };\n\n    this.clearCardCount = () => {\n      flippedCards = 0;\n      this.setState({\n        cards: flippedCards\n      });\n    };\n\n    this.removePaintings = id => {\n      const cards = this.props.paintingsToPass;\n      const newArray = cards.filter(filteredPainting => filteredPainting.id === id);\n      this.setState({\n        removedPaintings: this.state.removedPaintings.concat(newArray)\n      }, this.endGame);\n    };\n\n    this.endGame = () => {\n      if (this.state.removedPaintings.length === 16) {\n        this.props.endGame();\n      }\n    };\n\n    this.putPaintingInPlay = painting => {\n      if (flippedCards === 1) {\n        this.setState({\n          paintingInPlay: painting\n        });\n      }\n\n      if (flippedCards === 2) {\n        this.setState({\n          paintingInPlay: [painting, this.state.paintingInPlay]\n        });\n      }\n    };\n  }\n\n  render() {\n    const cards = this.props.paintingsToPass;\n    return React.createElement(\"div\", {\n      className: \"grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, cards.map(card => React.createElement(Card, {\n      className: \"grid-item\",\n      removedPaintings: this.state.removedPaintings,\n      key: card.id,\n      card: card,\n      checkMatch: this.checkMatch,\n      flippedCards: this.state.cards,\n      inPlay: this.state.paintingInPlay,\n      flipCardOnBoard: this.flipCardOnBoard,\n      putPaintingInPlay: this.putPaintingInPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default BoardGame;","map":{"version":3,"sources":["/Users/maryselig/Documents/memory-game-redux/memory-game-redux/src/components/BoardGame.js"],"names":["React","Card","Swal","withReactContent","MySwal","flippedCards","BoardGame","Component","state","paintingInPlay","cards","removedPaintings","checkMatch","painting","painting1","id","fire","imageUrl","text","imageWidth","imageHeight","width","background","confirmButtonColor","padding","imageAlt","animation","removePaintings","setState","clearCardCount","confirmButtonText","flipCardOnBoard","props","paintingsToPass","newArray","filter","filteredPainting","concat","endGame","length","putPaintingInPlay","render","map","card"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AAEA,MAAMC,MAAM,GAAGD,gBAAgB,CAACD,IAAD,CAA/B;AAEA,IAAIG,YAAY,GAAG,CAAnB;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AACNC,MAAAA,cAAc,EAAE,EADV;AAENC,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,gBAAgB,EAAE;AAHZ,KAD8B;;AAAA,SAOtCC,UAPsC,GAOzBC,QAAQ,IAAI;AACvB,YAAMC,SAAS,GAAG,KAAKN,KAAL,CAAWC,cAAX,CAA0B,CAA1B,CAAlB;;AACA,UAAII,QAAQ,CAACE,EAAT,KAAgBD,SAAS,CAACC,EAA9B,EAAkC;AAChCX,QAAAA,MAAM,CAACY,IAAP,CAAY;AACVC,UAAAA,QAAQ,EAAE,uDADA;AAEVC,UAAAA,IAAI,EAAE,aAFI;AAGVC,UAAAA,UAAU,EAAE,GAHF;AAIVC,UAAAA,WAAW,EAAE,GAJH;AAKVC,UAAAA,KAAK,EAAE,GALG;AAMVC,UAAAA,UAAU,EAAE,SANF;AAOVC,UAAAA,kBAAkB,EAAE,gBAPV;AAQVC,UAAAA,OAAO,EAAE,OARC;AASVC,UAAAA,QAAQ,EAAE,UATA;AAUVC,UAAAA,SAAS,EAAE;AAVD,SAAZ;AAYA,aAAKC,eAAL,CAAqBd,QAAQ,CAACE,EAA9B;AACA,aAAKa,QAAL,CAAc;AAAEnB,UAAAA,cAAc,EAAE;AAAlB,SAAd;AACA,aAAKoB,cAAL;AACD,OAhBD,MAgBO;AACL,aAAKD,QAAL,CAAc;AAAEnB,UAAAA,cAAc,EAAE;AAAlB,SAAd;AACAL,QAAAA,MAAM,CAACY,IAAP,CAAY;AACVC,UAAAA,QAAQ,EAAE,uDADA;AAEVE,UAAAA,UAAU,EAAE,GAFF;AAGVC,UAAAA,WAAW,EAAE,GAHH;AAIVU,UAAAA,iBAAiB,EAAE,OAJT;AAKVR,UAAAA,UAAU,EAAE,SALF;AAMVG,UAAAA,QAAQ,EAAE,UANA;AAOVD,UAAAA,OAAO,EAAE,OAPC;AAQVD,UAAAA,kBAAkB,EAAE,gBARV;AASVF,UAAAA,KAAK,EAAE,GATG;AAUVK,UAAAA,SAAS,EAAE;AAVD,SAAZ;AAYA,aAAKG,cAAL;AACD;AACF,KAzCqC;;AAAA,SA2CtCE,eA3CsC,GA2CpB,MAAM;AACtB1B,MAAAA,YAAY,IAAI,CAAhB;AACA,WAAKuB,QAAL,CAAc;AAAElB,QAAAA,KAAK,EAAEL;AAAT,OAAd;AACD,KA9CqC;;AAAA,SAgDtCwB,cAhDsC,GAgDrB,MAAM;AACrBxB,MAAAA,YAAY,GAAG,CAAf;AACA,WAAKuB,QAAL,CAAc;AAAElB,QAAAA,KAAK,EAAEL;AAAT,OAAd;AACD,KAnDqC;;AAAA,SAqDtCsB,eArDsC,GAqDpBZ,EAAE,IAAI;AACtB,YAAML,KAAK,GAAG,KAAKsB,KAAL,CAAWC,eAAzB;AACA,YAAMC,QAAQ,GAAGxB,KAAK,CAACyB,MAAN,CACfC,gBAAgB,IAAIA,gBAAgB,CAACrB,EAAjB,KAAwBA,EAD7B,CAAjB;AAGA,WAAKa,QAAL,CACE;AAAEjB,QAAAA,gBAAgB,EAAE,KAAKH,KAAL,CAAWG,gBAAX,CAA4B0B,MAA5B,CAAmCH,QAAnC;AAApB,OADF,EAEE,KAAKI,OAFP;AAID,KA9DqC;;AAAA,SAgEtCA,OAhEsC,GAgE5B,MAAM;AACd,UAAI,KAAK9B,KAAL,CAAWG,gBAAX,CAA4B4B,MAA5B,KAAuC,EAA3C,EAA+C;AAC7C,aAAKP,KAAL,CAAWM,OAAX;AACD;AACF,KApEqC;;AAAA,SAsEtCE,iBAtEsC,GAsElB3B,QAAQ,IAAI;AAC9B,UAAIR,YAAY,KAAK,CAArB,EAAwB;AACtB,aAAKuB,QAAL,CAAc;AAAEnB,UAAAA,cAAc,EAAEI;AAAlB,SAAd;AACD;;AACD,UAAIR,YAAY,KAAK,CAArB,EAAwB;AACtB,aAAKuB,QAAL,CAAc;AAAEnB,UAAAA,cAAc,EAAE,CAACI,QAAD,EAAW,KAAKL,KAAL,CAAWC,cAAtB;AAAlB,SAAd;AACD;AACF,KA7EqC;AAAA;;AA+EtCgC,EAAAA,MAAM,GAAI;AACR,UAAM/B,KAAK,GAAG,KAAKsB,KAAL,CAAWC,eAAzB;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGvB,KAAK,CAACgC,GAAN,CAAUC,IAAI,IACb,oBAAC,IAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,gBAAgB,EAAE,KAAKnC,KAAL,CAAWG,gBAF/B;AAGE,MAAA,GAAG,EAAEgC,IAAI,CAAC5B,EAHZ;AAIE,MAAA,IAAI,EAAE4B,IAJR;AAKE,MAAA,UAAU,EAAE,KAAK/B,UALnB;AAME,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,KAN3B;AAOE,MAAA,MAAM,EAAE,KAAKF,KAAL,CAAWC,cAPrB;AAQE,MAAA,eAAe,EAAE,KAAKsB,eARxB;AASE,MAAA,iBAAiB,EAAE,KAAKS,iBAT1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AAiBD;;AAnGqC;;AAsGxC,eAAelC,SAAf","sourcesContent":["import React from 'react'\nimport Card from './Card'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst MySwal = withReactContent(Swal)\n\nlet flippedCards = 0\n\nclass BoardGame extends React.Component {\n  state = {\n    paintingInPlay: [],\n    cards: 0,\n    removedPaintings: []\n  }\n\n  checkMatch = painting => {\n    const painting1 = this.state.paintingInPlay[1]\n    if (painting.id === painting1.id) {\n      MySwal.fire({\n        imageUrl: 'https://media.giphy.com/media/flYwljLseVZWE/giphy.gif',\n        text: 'They Match!',\n        imageWidth: 300,\n        imageHeight: 200,\n        width: 300,\n        background: '#090526',\n        confirmButtonColor: 'cornflowerblue',\n        padding: '.25em',\n        imageAlt: 'Bob Ross',\n        animation: false\n      })\n      this.removePaintings(painting.id)\n      this.setState({ paintingInPlay: [] })\n      this.clearCardCount()\n    } else {\n      this.setState({ paintingInPlay: [] })\n      MySwal.fire({\n        imageUrl: 'https://media.giphy.com/media/rYEAkYihZsyWs/giphy.gif',\n        imageWidth: 300,\n        imageHeight: 200,\n        confirmButtonText: 'Next!',\n        background: '#090526',\n        imageAlt: 'Bob Ross',\n        padding: '.25em',\n        confirmButtonColor: 'cornflowerblue',\n        width: 300,\n        animation: false\n      })\n      this.clearCardCount()\n    }\n  }\n\n  flipCardOnBoard = () => {\n    flippedCards += 1\n    this.setState({ cards: flippedCards })\n  }\n\n  clearCardCount = () => {\n    flippedCards = 0\n    this.setState({ cards: flippedCards })\n  }\n\n  removePaintings = id => {\n    const cards = this.props.paintingsToPass\n    const newArray = cards.filter(\n      filteredPainting => filteredPainting.id === id\n    )\n    this.setState(\n      { removedPaintings: this.state.removedPaintings.concat(newArray) },\n      this.endGame\n    )\n  }\n\n  endGame = () => {\n    if (this.state.removedPaintings.length === 16) {\n      this.props.endGame()\n    }\n  }\n\n  putPaintingInPlay = painting => {\n    if (flippedCards === 1) {\n      this.setState({ paintingInPlay: painting })\n    }\n    if (flippedCards === 2) {\n      this.setState({ paintingInPlay: [painting, this.state.paintingInPlay] })\n    }\n  }\n\n  render () {\n    const cards = this.props.paintingsToPass\n\n    return (\n      <div className='grid-container'>\n        {cards.map(card => (\n          <Card\n            className='grid-item'\n            removedPaintings={this.state.removedPaintings}\n            key={card.id}\n            card={card}\n            checkMatch={this.checkMatch}\n            flippedCards={this.state.cards}\n            inPlay={this.state.paintingInPlay}\n            flipCardOnBoard={this.flipCardOnBoard}\n            putPaintingInPlay={this.putPaintingInPlay}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default BoardGame\n"]},"metadata":{},"sourceType":"module"}